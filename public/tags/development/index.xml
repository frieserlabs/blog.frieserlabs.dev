<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Frieserlabs blog</title>
    <link>https://blog.frieserlabs.dev/tags/development/</link>
    <description>Recent content in Development on Frieserlabs blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.frieserlabs.dev/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Hooks in Bazel</title>
      <link>https://blog.frieserlabs.dev/post/bazel-git-hooks/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.frieserlabs.dev/post/bazel-git-hooks/</guid>
      <description>Recently, we have adopted the monorepo philosophy for our projects at my work team. We started to use it in a project that has multiple services.
The first concern that came to our mind, is that a single change in one of our services or common libraries, could break other services. When someone makes a change to any library to correct a bug or introduce a new feature for a particular service, it could break compatibility with other services or affect the behavior of another service without anyone noticing.</description>
    </item>
    
    <item>
      <title>Ignore a folder with Gazelle</title>
      <link>https://blog.frieserlabs.dev/post/ignore-folder-gazelle/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.frieserlabs.dev/post/ignore-folder-gazelle/</guid>
      <description>Gazelle is a Bazel build file generator for Bazel projects. Sometimes, we need to ignore some folder where Gazelle look into to generate build files.
Add this to your root BUILD.bazel file:
# BUILD.bazel # gazelle:exclude folder_path </description>
    </item>
    
    <item>
      <title>Functional Options for your API in Go</title>
      <link>https://blog.frieserlabs.dev/post/functional-option-in-go/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.frieserlabs.dev/post/functional-option-in-go/</guid>
      <description>Design patterns constantly help us to design our software architecture, and allow programmers to speak in a common language that make easier the transmission of concepts regardless of the programming language used.
The most used are those that help us to initialize type values: Creational Patterns. Recently I found a functional pattern that in my case fits most of the time: Functional Options. Before define and look at examples of how to use this pattern, I want to dive in how we normally initialize objects in Go.</description>
    </item>
    
    <item>
      <title>Functional Options Use Case I: HTTP Service Wrapper</title>
      <link>https://blog.frieserlabs.dev/post/http-service-functional-options/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.frieserlabs.dev/post/http-service-functional-options/</guid>
      <description>In previous posts, we discussed in depth the functional options pattern and listed the benefits of using this pattern over others such as the builder pattern when designing our APIs:
 Functional Options for your API in Go  Make your packages API more friendly in Go. August 29, 2020      In this post, we are going to see a common use case where we can apply this pattern.</description>
    </item>
    
    <item>
      <title>Functional Options Use Case II: Simple ORM</title>
      <link>https://blog.frieserlabs.dev/post/simple-orm-functional-options/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.frieserlabs.dev/post/simple-orm-functional-options/</guid>
      <description>In previous posts, we discussed in depth the functional options pattern and listed the benefits of using this pattern over others such as the builder pattern when designing our APIs:
 Functional Options for your API in Go  Make your packages API more friendly in Go. August 29, 2020      In this one, we are going to apply this pattern to another common use case in our projects, accessing a database.</description>
    </item>
    
  </channel>
</rss>
